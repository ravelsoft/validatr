

class NProperty
    (@name, @inner_type) ->
        @optional = false
        @default = null
        @nullable = false

    setOptional: function
        @optional = true

    setDefault: function (literal)
        # FIXME find out about if literal is okay.
        @default = literal

    setNullable: function
        @nullable = true

    toString: function
        return "ASDFASDFASDF"
        

/**
 *
 */
class NType
    ->

/**
 *
 */
class NArray extends NType
    (@inner_type) ->
        super ...
        
        if not @inner_type
            throw new Error "Arrays can't have a null inner type."

    toString: function
        return "[ #{@inner_type.toString!} ]"

/**
 *  The Object class
 */
class NObject extends NType
    ->
        super ...
        @properties = []

    addProperty: function (prop)
        if prop not instanceof NProperty
            throw new Error "Can't add a non property to an Object Node"

        @properties.push prop

    toString: function
        s = "{ "
        for p of @properties
            s += p.toString!
        s += " }"
        return s

class NString extends NType
    -> super ...
    toString: function  
        \string
        
class NNumber extends NType
    -> super ...
    toString: function
        \number

class NBoolean extends NType
    -> super ...
    toString: function
        \boolean

class NAnything extends NType
    -> super ...
    toString: function
        \anything

class NInteger extends NType
    -> super ...
    toString: function
        \integer

exports <<< { NInteger, NAnything, NBoolean, NNumber, NString, NArray, NObject, NProperty }
