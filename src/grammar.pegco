
->
    { TypeString, TypeAnything, 
        TypeNumber, TypeBoolean, TypeDate, TypeInteger, 
        TypeObject, TypeArray, ArrayRange, TypeProperty, TypePropertyList
        TypeChoice, TypeRef, TypeRefCall, TypeNull, TypeUndefined

        BinaryOperator,

        CIf,

        LString, LNumber, LList, LVariable, LBoolean, LFunCall, LNull, LUndefined
    } = require './ast'

toplevel
    = node:(type) __? -> return node

type
    = decl:ref_decl? t:type_choice ->
        if decl
            return new TypeRef decl, t
        return t

type_choice
    = __? type:type_single typearr:(PIPE t:type_single { return t; })* ->
        if typearr.length > 0
            types = new TypeChoice!
            types.addType type
            for t of typearr
                types.addType t
            return types
        return type

type_single
    = !(property) type:(string
        / date
        / number
        / integer
        / boolean
        / null
        / undefined
        / anything / ref_call) validation:boolean_expression? assignement:assignement? ->
        # FIXME add validation
        if validation
            type.validation = validation
        type.assign = assignement or null
        return type

    / type:(array / object) assignement:assignement? ->
        type.assign = assignement or null
        return type

ref_decl
    = AMPERSAND name:string_simple ->
        return name

ref_call
    = STAR name:string_simple ->
        return new TypeRefCall name

assignement
    = AS v:variable ->
        if not v.name
            throw new Error "Can't assign to special variable $"
        return v

top_level_assignement
    # FIXME
    = SET v:variable AS l:literal ->
        return ""
    / SET r:ref_call AS t:type_choice ->
        return ""

array
    = validation:boolean_expression? LBRACKET type:type? RBRACKET ->
        arr = new TypeArray type
        if validation
            arr.validation = validation
        return arr

object
    = validation:boolean_expression? LBRACE props:property* RBRACE ->
        obj = new TypeObject!
        for o of props
            obj.addProperty o
        if validation
            obj.validation = validation
        return obj

    / props:property+ ->
        obj = new TypeObject!
        for o of props
            obj.addProperty o
        return obj

property
    = __? name:string_literal  __? ":" type:type def:(!property def:default { return def; })?  ->
        prop = new TypeProperty name, type
        if def
            prop.setDefault def
        return prop

    / conditional_property

conditional_property
    = IF cond:boolean_expression props:property+ elifs:(ELIF cond:boolean_expression props:property+ { return new CIf(cond, new TypePropertyList(props)); })* else_part:(ELSE props:property+ { return props; })? ENDIF ->
        cif = new CIf cond, new TypePropertyList props
        for e of elifs
            cif.addElse e
        if else_part
            cif.addElse new TypePropertyList else_part
        return cif
        
    # / regexp_literal

default 
    = __? "default" lit:literal ->
        return lit

null
    = __? "null" -> return new TypeNull

undefined
    = __? "undefined" -> return new TypeUndefined

date 
    = __? "date" -> return new TypeDate
string 
    = __? "string" -> 
        return new TypeString
number 
    = __? "number" -> return new TypeNumber
integer 
    = __? "integer" -> return new TypeInteger
boolean 
    = __? "boolean" -> return new TypeBoolean
anything
    = __? "anything" -> return new TypeAnything

boolean_expression
    = l:expression op:(AND / OR) r:boolean_expression ->
        op.left = l
        op.right = r
        return op
    / LPAREN exp:boolean_expression RPAREN -> return exp
    / exp:expression ->
        return exp

/**
 *
 */
expression
    = expression_op
    / left:literal op:expression_op ->
        op.left = left
        return op

expression_op
    = op:(IN / NOT op:IN { op.negated = true; return op; } ) container:(variable / list / function_call) ->
        op.right = container
        return op
            
    / op:(op:IS NOT { op.negated = true; return op; } / IS) r:literal ->
        op.right = r
        return op
        
    / op:COMP_OP r:literal ->
        op.right = r
        return op

COMP_OP = LTE / GTE / LT / GT

/**
 *
 */
literal
    = __? lit:(lundefined
          / lnull
          / function_call
          / variable
          / number_literal
          / boolean_literal
          / string_literal
          / list ) -> return lit

/**
 *
 */
list
    = LPAREN lits:(li:literal { return li; })+ RPAREN ->
        return new LList lits

string_literal
    = "'" str:("\\'" / [^\'])* "'" -> return new LString str.join ""
    / '"' str:("\\\"" / [^\"])*  '"' -> return new LString str.join ""
    / str:string_simple -> return new LString str

boolean_literal
    = TRUE  -> return new LBoolean true
    / FALSE -> return new LBoolean false

/**
 *  A function call.
 */
function_call
    = name:string_regular LPAREN variable RPAREN ->
        # FIXME should be able to give arguments
        return new LFunCall name.str, [new LVariable ""]
    / name:string_regular EXCLAMATION ->
        return new LFunCall name.str, [new LVariable ""]

/**
 *  A simple string for label matching.
 */
string_simple
    = __? f:[^:\t\+\n\(\)\$ ] s:[^:\t\+\n\) ]* -> 
        str = f + s.join ""
        return str

safe_identifier
    = str:[a-zA-Z_$] str2:[a-zA-Z_0-9$]* ->
        return str + str2.join ""

variable
    = DOLLAR str:safe_identifier? ->
        return new LVariable str

/**
 *  A string as encountered in regular programming languages.
 */
string_regular
    = __? f:[a-zA-Z_] s:[a-zA-Z_0-9]+ ->
        str = f + s.join ""
        return new LString str

number_literal
    = n:[0-9]+ comma:("." e:[0-9]+ { return '.' + e.join(""); })? ->
        n = (n.join "") + comma
        return new LNumber n

integer
    = __? number:[0-9]+ -> return number.join ""

lnull
    = "null" -> return new LNull

lundefined
    = "undefined" -> return new LUndefined


# comments !
__
    = (
    whitespace? "#" [^\n]* "\n"
    / whitespace
    / '\n' )+ -> return ""

whitespace 
    = (" " / "\t")+

AMPERSAND   = __? "&"
LBRACKET    = __? "["
RBRACKET    = __? "]"
LBRACE      = __? "{"
RBRACE      = __? "}"
STAR        = __? "*"
PLUS        = __? "+"
COMMA       = __? ","
LPAREN      = __? "("
RPAREN      = __? ")"
AROBAS      = __? "@"
DOLLAR      = __? "$"
PIPE        = __? "|"
EXCLAMATION = __? "!"
SHARP       = __? "#"

INCLUDE     = __? "include"
SET         = __? "set"
IF          = __? "if"
ELIF        = __? "elif"
ELSE        = __? "else"
ENDIF       = __? "endif"
AS          = __? "as"
IN          = __? "in" { return BinaryOperator["in"](); }
NOT         = __? "not"
IS          = __? "is" { return BinaryOperator.is(); }
MATCHES     = __? "matches" { return BinaryOperator.matches(); }

GT          = __? o:">" { return BinaryOperator.gt(); }
LT          = __? o:"<" { return new BinaryOperator.lt(); }
LTE         = __? o:"<=" { return new BinaryOperator.lte(); }
GTE         = __? o:">=" { return new BinaryOperator.gte(); }

TRUE        = __? "true" { return new Boolean(true); }
FALSE       = __? "false" { return new Boolean(false); }
AND         = __? "and" { return new BinaryOperator.and(); }
OR          = __? "or" { return new BinaryOperator.or(); }

