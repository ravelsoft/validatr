/**
 *
 */
class Type
    ->
        @validation = null

class TypeChoice
    (@types ? []) ->

    addType: function (type)
        @types.push type

class TypeProperty
    (@name, @inner_type) ->
        @default = null

    setDefault: function (literal)
        # FIXME find out about if literal is okay.
        @default = literal
   
class TypePropertyList
    (@list ? []) ->

    push: function (elt)    
        @list.push elt

/**
 *
 */
class TypeArray extends Type
    (@inner_type) ->
        super ...

        if not @inner_type
            @inner_type = new TypeAnything!

/**
 *  The Object class
 */
class TypeObject extends Type
    ->
        super ...
        @properties = new TypePropertyList

    addProperty: function (prop)
        #if prop not instanceof TypeProperty
        #    throw new Error "Can't add a non property to an Object Typeode"

        @properties.push prop

class TypeString extends Type
    -> super ...
        
class TypeNumber extends Type
    -> super ...

class TypeBoolean extends Type
    -> super ...

class TypeAnything extends Type
    -> super ...

class TypeInteger extends Type
    -> super ...

class TypeDate extends Type
    -> super ...

class TypeNull extends Type
    -> super ...

class TypeUndefined extends Type
    -> super ...

class TypeRef extends Type
    types = {}

    @declare = function (name, ref)
        types[name] = ref

    (@name, @type) -> 
        super ...
        TypeRef.declare name, this

class TypeRefCall extends Type
    (@name) ->
    getRef: function
        return TypeRef.types[@name]

exports <<< { TypeInteger, TypeAnything, TypeBoolean, TypeNumber, TypeString, TypeArray, TypeObject, TypeProperty, TypeChoice, TypeDate, TypeRef, TypeRefCall, TypeNull, TypeUndefined, TypePropertyList }

