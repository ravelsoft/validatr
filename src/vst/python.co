{ Visitor } = require './base'

op = do
    "is": " == "
    "is not": " != "
    ">": " > "
    ">=": " >= "
    "<": " < "
    "<=": " <= "
    "in": " in "
    "not in": " not in "
    "and": " and "
    "or": " or "

class PythonVisitor extends Visitor
    -> 
        super ...
        @indentation = 2
        @declarations = []

    assign: function (node)
        return "'#{node.name}'"

    /**
     *  Since we're dealing with python, we need some indentation to be done.
     *  Indentation is computed with @indentation
     *
     *  @param text The text we need to indent.
     */
    indent: function (text)
        indent = "    " * @indentation
        return ( (if t and i > 0 then (indent + t) else t) for t, i of text.split '\n').join '\n'

    /**
     *  Visit a node and indent its result to the current level of indentation.
     *
     *  @param node the node to visit
     *  @param ind the level of indentation : replaces @indentation or takes
     *      its value if nothing is provided.
     */
    visit: function (node, ind ? @indentation)
        bak = @indentation
        @indentation = ind
        s = super node
        s = @indent s
        @indentation = bak
        return s

    opts: function (node, res)
        if node.validation
            res.push "lambda x, ctx: " + @visit node.validation, 0
        if node.assign
            res.push @visit node.assign, 0

        return res

    simpleops: function (node)
        res = []
        @opts node, res
        return res.join ", "

/**
 *
 */
visitor = new PythonVisitor do

    /**
     *
     */
    TypeChoice: function (node)
        choices = []

        for t of node.types
            choices.push @visit t, 1

        choices = choices.join ", "

        return "TChoice(#choices)"

    /**
     *
     */
    TypeObject: function (node)
        
        args = [@visit node.properties, 1]
        @opts node, args

        args = args.join ", "
        
        return "TObject(#args)"

    /**
     *
     */
    TypePropertyList: function (node)
        res = []
        
        for p of node.list
            res.push @visit p

        if res.length is 0
            return '' # equivalent to say "anything"

        res = res.join ",\n"

        return "TProperties(#res)"

    /**
     *
     */
    TypeProperty: function (node)
        args = [ @visit node.name ]
        args.push @visit node.inner_type
        @opts node, args
        args = args.join ", "
        return "TProperty(#args)"

    /**
     *
     */
    TypeArray: function (node)
        args = []
        inner = @visit node.inner_type

        if inner
            args.push inner

        @opts node, args

        args = args.join ", "
        
        return "TArray(#args)"

    /**
     *
     */
    TypeRef: function (node)
        decl = node.name + " = " + @visit node.type, 0

        @declarations.push decl

        return node.name

    TypeDate: function (node)
        # FIXME LACKING TYPE COERCION FOR THE DATE.
        return "TDate(#{@simpleops node})"

    TypeRefCall: function (node)
        return node.name

    TypeString: function (node)
        return "TString(#{@simpleops node})"

    TypeUndefined: function (node)
        return "TUndefined(#{@simpleops node})"

    TypeNumber: function (node)
        return "TNumber(#{@simpleops node})"

    TypeBoolean: function (node)
        return "TBoolean(#{@simpleops node})"

    TypeNull: function (node)
        return "TNull(#{@simpleops node})"

    TypeAnything: function (node)
        return ""

    ###################### LITERALS #############################

    /**
     *
     */
    LString: function (node)
        return "'#{node.str}'"

    LNumber: function (node)
        return node.num

    LVariable: function (node)
        if node.name
            return "ctx.get('#{node.name}', Undefined)"
        else
            return "x"

    LFunCall: function (node)
        ar = []
        for a of node.args
            ar.push @visit a
        ar = ar.join ", "

        return "#{node.name}(#ar)"

    LList: function (node)
        elts = []

        for e of node.list
            elts.push @visit e, 0

        # python wants a tuple as ('yeah',) or (,) if it is empty.
        if elts.length is 0
            elts = ['', '']

        if elts.length is 1
            elts.push ''

        return "(#{elts.join ", "})"

    LBoolean: function (node)
        if node.value
            return \True
        return \False

    LUndefined: function (node)
        return "Undefined"

    LNull: function (node)
        return "None"

    ################################################################

    BinaryOperator: function (node)
        s = ["("]

        s.push @visit node.left, 0
        
        if node.negated
            s.push op[node.not_op]
        else
            s.push op[node.op]

        s.push @visit node.right, 0
        s.push ")"

        return s.join ""

    #################################################################

    CIf: function (node)
        args = []
        args.push "lambda x, ctx: " + @visit node.cond
        args.push @visit node.then, 1

        if node.otherwise
            args.push @visit node.otherwise, 1

        args = args.join ",\n"

        return "TIf(#args)"

exports.pythonVisitor = do
    visit: function (node)
        visit = visitor.visit node, 0

        return """

def length(elt):
    return len(elt)

#{visitor.declarations.join "\n\n"}#{if visitor.declarations.length > 0 then "\n\n" else ""}
validator = #visit
"""

