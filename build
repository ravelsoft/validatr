#!./node_modules/.bin/coco

coco = require \coco
pegco = require \pegco
{ defaultEnvironment } = require \jinjs

{ TaskPool, walk } = require \rbuild

{ argv }: optimist = require "optimist"
    .usage "Compile all the necessary files of the project."
    .boolean "help"
    .alias "help", "h"
    .describe "help", "You're staring at it."

    .boolean "watch"
    .alias "watch", "w"
    .describe "watch", "Watch the source files for changes, and recompile when changes are detected."

if argv.help
    console.log optimist.help!
    process.exit 0

pool = new TaskPool watch: argv.watch

# Compile .co files to .js
walk "./src", /\.co$/, (abspath, relpath) ->

    outfile = "./lib/" + relpath.replace /co$/, 'js'

    pool.createTaskForFile abspath, outfile, (data) ->
        coco.compile data, bare: true

# Compile .co files to .js
walk "./src", /\.jinjs$/, (abspath, relpath) ->

    outfile = "./lib/" + relpath.replace /jinjs$/, 'js'

    pool.createTaskForFile abspath, outfile, (data) ->
        defaultEnvironment.getTemplateSourceFromString data

# Compile .pegco files to .js
walk "./src", /\.pegco$/, (abspath, relpath) ->

    outfile = "./lib/" + relpath.replace /pegco$/, 'js'

    pool.createTaskForFile abspath, outfile, (data) ->
        pegco.compile data

walk "./src", /\.src$/, (abs, rel) ->
    outfile = "./lib/" + rel.replace /src$/, 'js'

    pool.createTaskForFile abs, outfile, (data) ->
        return """
            exports.source = #{JSON.stringify(data)};
        """

